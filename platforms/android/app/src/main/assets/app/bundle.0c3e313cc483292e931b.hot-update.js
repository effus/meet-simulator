webpackHotUpdate("bundle",{

/***/ "./services/backend-service.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BackendService; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_UserModel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./models/UserModel.js");
// The following is a sample implementation of a backend service using Progress Kinvey (https://www.progress.com/kinvey).
// Feel free to swap in your own service / APIs / etc here for your own apps.
//import * as Kinvey from "kinvey-nativescript-sdk";

/*Kinvey.init({
    appKey: "kid_SyY8LYO8M",
    appSecret: "09282985d7c540f7b076a9c7fd884c77"
});*/


var User = {
  isLoggedIn: false
};
class BackendService {
  constructor() {
    this.user = null;
    this.uuid = null;
  }

  isLoading() {
    return this.loading;
  }

  getHeaders() {
    return {
      'Authorization': 'uuid ' + this.uuid
    };
  }

  isLoggedIn() {
    console.log('isLoggedIn', User.isLoggedIn);
    return User.isLoggedIn;
  }

  checkDeviceAutoLogin(uuid) {
    //this.device.uuid = uuid;
    return new Promise((resolve, reject) => {
      //setTimeout(() => {
      //this.user = new UserModel();
      User.isLoggedIn = true;
      console.log('checkDeviceAutoLogin result');
      resolve({
        result: true
      }); //}, 3000);
    });
  }

  login(user) {
    //return Kinvey.User.login(user.email, user.password);
    return new Promise((resolve, reject) => {
      resolve();
    });
  }

  logout() {
    //return Kinvey.User.logout();
    return new Promise((resolve, reject) => {
      resolve();
    });
  }

  register(user) {
    //return Kinvey.User.signup({ username: user.email, password: user.password });
    return new Promise((resolve, reject) => {
      resolve();
    });
  }

  getContacts(user) {
    var uuid = nsUuid.getUUID();
    console.log("getContacts >> The device UUID is ".concat(uuid));
    return new Promise((resolve, reject) => {
      var users = [{
        id: "11",
        text: "Лида",
        src: "https://i.pinimg.com/236x/54/57/28/54572848f27e6e26d955226b1d343305.jpg"
      }, {
        id: "13",
        text: "Рома",
        src: "https://images.pexels.com/photos/2099225/pexels-photo-2099225.jpeg?auto=compress&cs=tinysrgb&w=200"
      }];
      resolve(users);
    });
  }

  getMessages(user) {
    return new Promise((resolve, reject) => {
      resolve([{
        isOwner: false,
        time: "22.01 11:00",
        delivered: true,
        text: "Hi!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: false,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!",
        img: "https://i.pinimg.com/236x/54/57/28/54572848f27e6e26d955226b1d343305.jpg"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: true,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: false,
        text: "Hello!"
      }, {
        isOwner: true,
        time: "22.01 11:20",
        delivered: null,
        text: "Hello! Hello!Hello! Hello!Hello! Hello!Hello! Hello! Hello! Hello! Hello! Hello! Hello!"
      }]);
    });
  }

  getCurrentStatus(user) {
    return new Promise((resolve, reject) => {
      resolve({
        online: true,
        responseCases: [{
          id: 1,
          text: 'Hello'
        }, {
          id: 4,
          text: 'Bye'
        }]
      });
    });
  }

  selectCase(selectedCase) {
    return new Promise((resolve, reject) => {
      console.log('selectCase', selectedCase);
      resolve();
    });
  }

}

/***/ }),

/***/ "kinvey-nativescript-sdk":
false

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZXJ2aWNlcy9iYWNrZW5kLXNlcnZpY2UuanMiXSwibmFtZXMiOlsiVXNlciIsImlzTG9nZ2VkSW4iLCJCYWNrZW5kU2VydmljZSIsImNvbnN0cnVjdG9yIiwidXNlciIsInV1aWQiLCJpc0xvYWRpbmciLCJsb2FkaW5nIiwiZ2V0SGVhZGVycyIsImNvbnNvbGUiLCJsb2ciLCJjaGVja0RldmljZUF1dG9Mb2dpbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzdWx0IiwibG9naW4iLCJsb2dvdXQiLCJyZWdpc3RlciIsImdldENvbnRhY3RzIiwibnNVdWlkIiwiZ2V0VVVJRCIsInVzZXJzIiwiaWQiLCJ0ZXh0Iiwic3JjIiwiZ2V0TWVzc2FnZXMiLCJpc093bmVyIiwidGltZSIsImRlbGl2ZXJlZCIsImltZyIsImdldEN1cnJlbnRTdGF0dXMiLCJvbmxpbmUiLCJyZXNwb25zZUNhc2VzIiwic2VsZWN0Q2FzZSIsInNlbGVjdGVkQ2FzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTs7QUFFQTs7OztBQUtBO0FBQ0E7QUFHQSxJQUFNQSxJQUFJLEdBQUc7QUFDVEMsWUFBVSxFQUFFO0FBREgsQ0FBYjtBQUllLE1BQU1DLGNBQU4sQ0FBcUI7QUFFaENDLGFBQVcsR0FBRztBQUNWLFNBQUtDLElBQUwsR0FBWSxJQUFaO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLElBQVo7QUFDSDs7QUFFREMsV0FBUyxHQUFHO0FBQ1IsV0FBTyxLQUFLQyxPQUFaO0FBQ0g7O0FBRURDLFlBQVUsR0FBRztBQUNULFdBQU87QUFDSCx1QkFBaUIsVUFBVSxLQUFLSDtBQUQ3QixLQUFQO0FBR0g7O0FBRURKLFlBQVUsR0FBRztBQUNUUSxXQUFPLENBQUNDLEdBQVIsQ0FBWSxZQUFaLEVBQTBCVixJQUFJLENBQUNDLFVBQS9CO0FBQ0EsV0FBT0QsSUFBSSxDQUFDQyxVQUFaO0FBQ0g7O0FB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QUUsSUFIZjtBQUlJTCxZQUFJLEVBQUU7QUFKVixPQWpHUSxDQUFELENBQVA7QUF3R0gsS0F6R00sQ0FBUDtBQTBHSDs7QUFFRE8sa0JBQWdCLENBQUMzQixJQUFELEVBQU87QUFDbkIsV0FBTyxJQUFJUSxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDRCxhQUFPLENBQUM7QUFDSm1CLGNBQU0sRUFBRSxJQURKO0FBRUpDLHFCQUFhLEVBQUUsQ0FDWDtBQUFFVixZQUFFLEVBQUUsQ0FBTjtBQUFTQyxjQUFJLEVBQUU7QUFBZixTQURXLEVBRVg7QUFBRUQsWUFBRSxFQUFFLENBQU47QUFBU0MsY0FBSSxFQUFFO0FBQWYsU0FGVztBQUZYLE9BQUQsQ0FBUDtBQU9ILEtBUk0sQ0FBUDtBQVNIOztBQUVEVSxZQUFVLENBQUNDLFlBQUQsRUFBZTtBQUNyQixXQUFPLElBQUl2QixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDTCxhQUFPLENBQUNDLEdBQVIsQ0FBWSxZQUFaLEVBQTBCeUIsWUFBMUI7QUFDQXRCLGFBQU87QUFDVixLQUhNLENBQVA7QUFJSDs7QUEzTStCLEMiLCJmaWxlIjoiYnVuZGxlLjBjM2UzMTNjYzQ4MzI5MmU5MzFiLmhvdC11cGRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgZm9sbG93aW5nIGlzIGEgc2FtcGxlIGltcGxlbWVudGF0aW9uIG9mIGEgYmFja2VuZCBzZXJ2aWNlIHVzaW5nIFByb2dyZXNzIEtpbnZleSAoaHR0cHM6Ly93d3cucHJvZ3Jlc3MuY29tL2tpbnZleSkuXG4vLyBGZWVsIGZyZWUgdG8gc3dhcCBpbiB5b3VyIG93biBzZXJ2aWNlIC8gQVBJcyAvIGV0YyBoZXJlIGZvciB5b3VyIG93biBhcHBzLlxuXG4vL2ltcG9ydCAqIGFzIEtpbnZleSBmcm9tIFwia2ludmV5LW5hdGl2ZXNjcmlwdC1zZGtcIjtcblxuLypLaW52ZXkuaW5pdCh7XG4gICAgYXBwS2V5OiBcImtpZF9TeVk4TFlPOE1cIixcbiAgICBhcHBTZWNyZXQ6IFwiMDkyODI5ODVkN2M1NDBmN2IwNzZhOWM3ZmQ4ODRjNzdcIlxufSk7Ki9cblxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1VzZXJNb2RlbC5qcyc7XG5cblxuY29uc3QgVXNlciA9IHtcbiAgICBpc0xvZ2dlZEluOiBmYWxzZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFja2VuZFNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudXNlciA9IG51bGw7XG4gICAgICAgIHRoaXMudXVpZCA9IG51bGw7XG4gICAgfVxuXG4gICAgaXNMb2FkaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkaW5nO1xuICAgIH1cblxuICAgIGdldEhlYWRlcnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICd1dWlkICcgKyB0aGlzLnV1aWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzTG9nZ2VkSW4oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpc0xvZ2dlZEluJywgVXNlci5pc0xvZ2dlZEluKTtcbiAgICAgICAgcmV0dXJuIFVzZXIuaXNMb2dnZWRJbjtcbiAgICB9XG5cbiAgICBjaGVja0RldmljZUF1dG9Mb2dpbih1dWlkKSB7XG4gICAgICAgIC8vdGhpcy5kZXZpY2UudXVpZCA9IHV1aWQ7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvL3NldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vdGhpcy51c2VyID0gbmV3IFVzZXJNb2RlbCgpO1xuICAgICAgICAgICAgICAgIFVzZXIuaXNMb2dnZWRJbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NoZWNrRGV2aWNlQXV0b0xvZ2luIHJlc3VsdCcpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vfSwgMzAwMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ2luKHVzZXIpIHtcbiAgICAgICAgLy9yZXR1cm4gS2ludmV5LlVzZXIubG9naW4odXNlci5lbWFpbCwgdXNlci5wYXNzd29yZCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ291dCgpIHtcbiAgICAgICAgLy9yZXR1cm4gS2ludmV5LlVzZXIubG9nb3V0KCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyKHVzZXIpIHtcbiAgICAgICAgLy9yZXR1cm4gS2ludmV5LlVzZXIuc2lnbnVwKHsgdXNlcm5hbWU6IHVzZXIuZW1haWwsIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRDb250YWN0cyh1c2VyKSB7XG4gICAgICAgIGNvbnN0IHV1aWQgPSBuc1V1aWQuZ2V0VVVJRCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgZ2V0Q29udGFjdHMgPj4gVGhlIGRldmljZSBVVUlEIGlzICR7dXVpZH1gKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBbe1xuICAgICAgICAgICAgICAgIGlkOiBcIjExXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCLQm9C40LTQsFwiLFxuICAgICAgICAgICAgICAgIHNyYzogXCJodHRwczovL2kucGluaW1nLmNvbS8yMzZ4LzU0LzU3LzI4LzU0NTcyODQ4ZjI3ZTZlMjZkOTU1MjI2YjFkMzQzMzA1LmpwZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBcIjEzXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCLQoNC+0LzQsFwiLFxuICAgICAgICAgICAgICAgIHNyYzogXCJodHRwczovL2ltYWdlcy5wZXhlbHMuY29tL3Bob3Rvcy8yMDk5MjI1L3BleGVscy1waG90by0yMDk5MjI1LmpwZWc/YXV0bz1jb21wcmVzcyZjcz10aW55c3JnYiZ3PTIwMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmVzb2x2ZSh1c2Vycyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldE1lc3NhZ2VzKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoW3tcbiAgICAgICAgICAgICAgICBpc093bmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aW1lOiBcIjIyLjAxIDExOjAwXCIsXG4gICAgICAgICAgICAgICAgZGVsaXZlcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiSGkhXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXNPd25lcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0aW1lOiBcIjIyLjAxIDExOjIwXCIsXG4gICAgICAgICAgICAgICAgZGVsaXZlcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiSGVsbG8hXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXNPd25lcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0aW1lOiBcIjIyLjAxIDExOjIwXCIsXG4gICAgICAgICAgICAgICAgZGVsaXZlcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiSGVsbG8hXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXNPd25lcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiLFxuICAgICAgICAgICAgICAgIGltZzogXCJodHRwczovL2kucGluaW1nLmNvbS8yMzZ4LzU0LzU3LzI4LzU0NTcyODQ4ZjI3ZTZlMjZkOTU1MjI2YjFkMzQzMzA1LmpwZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlbGxvIVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzT3duZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZTogXCIyMi4wMSAxMToyMFwiLFxuICAgICAgICAgICAgICAgIGRlbGl2ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJIZWxsbyFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpc093bmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRpbWU6IFwiMjIuMDEgMTE6MjBcIixcbiAgICAgICAgICAgICAgICBkZWxpdmVyZWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJIZWxsbyEgSGVsbG8hSGVsbG8hIEhlbGxvIUhlbGxvISBIZWxsbyFIZWxsbyEgSGVsbG8hIEhlbGxvISBIZWxsbyEgSGVsbG8hIEhlbGxvISBIZWxsbyFcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRTdGF0dXModXNlcikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgb25saW5lOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQ2FzZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgeyBpZDogMSwgdGV4dDogJ0hlbGxvJyB9LFxuICAgICAgICAgICAgICAgICAgICB7IGlkOiA0LCB0ZXh0OiAnQnllJyB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdENhc2Uoc2VsZWN0ZWRDYXNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0Q2FzZScsIHNlbGVjdGVkQ2FzZSk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==